{
  "hash": "49b134251bf5ec93944ba54f5e31d641",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands On Exercise 2\"\nauthor: \"Jenna Cheo\"\ndate: \"26th September 2024\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nexecute: \n  freeze: true\n  eval: false\n---\n\n\n# 1.0 Introduction\n\nDrug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide.\n\nThe geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\n\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\n\n# 2.0 Getting Started\n\n## 2.1 Loading packages into R\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, st, tidyverse, raster, tmap, tmaptools, ggplot2, spatstat, sfdep)\n```\n:::\n\n\n## 2.2 Importing the datasets\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\n-   [Thailand Drug Offenses \\[2017-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. You are required to use the province boundary data set.\n\n### 2.2.1 Importing Thailand Drug Offenses (csv file)\n\nThe dataset, which we downloaded from Kaggle, is in csv format. The codes chunk below uses `read_csv()` function of **readr** package to import *the dataset* into R as a tibble data frame called *drug_offences*.\n\nThe data has also been transformed such it only contains cases of drug use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offences <- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n```\n:::\n\n\n### 2.2.2 Importing Thailand Subnational Administrative Boundaries (shp)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_sf <- read_sf(dsn = \"data\", \n                 layer = \"tha_admbnda_adm1_rtsd_20220121\") %>%\n  st_as_sf(coords =c(\n    \"longitude\", \"latitude\"),\n           crs = 4326) %>%\n  st_transform(crs = 24047)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_sf\n```\n:::\n\n\n## 2.3 Geospatial Data Wrangling\n\n### 2.3.1 Fixing province names\n\nThere is a mismatch of the province names between the datasets we are importing. We resolve this by changing the names of provinces in the drug offenses dataset to align.\n\n-   Loburi -\\> Lop Buri\n\n-   Buogkan -\\> Bueng Kan\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offences <- drug_offences %>% \n                  mutate(province_en = replace(province_en, province_en == 'buogkan', 'Bueng Kan')) %>%\n                  mutate(province_en = replace(province_en, province_en == 'Loburi', 'Lop Buri'))\ndrug_offences\n```\n:::\n\n\n### 2.3.2 Performing relational join\n\nThe code chunk below will be used to update the attribute table of *thailand_sf*’s SpatialPolygonsDataFrame with the attribute fields of *drug_offenses* dataframe. This is performed by using *left_join()* of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offences_thailand <- thailand_sf %>%\n  left_join(drug_offences,\n            by = c(\"ADM1_EN\" = \"province_en\",\n                  \"ADM1_TH\" = \"province_th\")) %>%\n  dplyr::select(1:2, 17:20)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offences_thailand\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offences_thailand_sf <- st_as_sf(drug_offences_thailand)\n\nst_crs(drug_offences_thailand_sf) <- st_crs(thailand_sf)\n\nprint(st_crs(drug_offences_thailand_sf))\n```\n:::\n\n\n### 2.3.3 Visualising Regional Development Indicator\n\nWe prepare a basemap and a choropleth map showing the distribution of drug offences by using `qtm()` of **tmap** package.\n\nDue to the large size of the dataset, we split the drug offences occurrences by their fiscal year to make it more convenient to process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offence_list <- split(drug_offences_thailand, drug_offences_thailand$fiscal_year)\n```\n:::\n\n\nIn the chunk of code below, we create a list to store the plots for each of the drug offences occurring during their respective fiscal year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_list <- list()\n\n# Loop through the list and create a plot for each year, storing them in plot_list\nfor (year in names(drug_offence_list)) {\n  p <- tm_shape(drug_offence_list[[year]]) +\n      tm_fill(\"no_cases\",\n              n = 5,\n              style = \"quantile\",\n              title = \"Number of Cases\") +\n      tm_borders(alpha = 0.5) +\n      tm_layout(main.title = paste(\"EQC\", year),\n                legend.outside = TRUE,\n                legend.outside.position = \"right\")\n  \n  # Store the plot in the list\n  plot_list[[year]] <- p\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_arrange(plotlist = plot_list, \n             ncol = 2, \n             nrow = 3)\n```\n:::\n\n\nIt can be seen that drug offenses were most prevalent in 2017-2019, however tapered off in 2020. The most probable reason would likely due to Covid-19 resulting in the nationwide lockdown, which may hinder police reports and access to drugs from dealers.\n\nCases were also much more prevalent in the Southern area of Thailand, in comparison to the Northen provinces.\n\n# 3.0 Drug Use Cases 2019\n\n## 3.1 Global Measures of Spatial Autocorrelation\n\n### 3.1.1 Computing Contiguity Spatial Weights\n\nWe need to first construct a spatial weight of the study area, used to define the neighbourhood relationships between the provinces in Thailand.\n\nAs the dataset we are working with takes a significant time to process due to its large size, we choose to analyse only one fiscal year for efficiency. In this case, we have taken 2019 as it is the most prevalent before 2020 occurred.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offence_list[[3]]\n```\n:::\n\n\nWe then filter it such that we only address the drug use cases for now, to reduce the size of the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_use_2019 <- drug_offence_list[[3]] %>%\n  filter(types_of_drug_offenses == \"drug_use_cases\")\n```\n:::\n\n\nWe now generate the neighbours list.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_druguse_2019 <- drug_use_2019 %>%\n  mutate(nb = st_contiguity(geometry))\n```\n:::\n\n\nThe dataset has Phuket as a province with no neighbors. The code chunk below manually fills it in using Phuket's nearest neighbour.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_index <- 67 \nnearest_index <- 68\n\nwm_q_druguse_2019$nb[[empty_index]] <- as.integer(nearest_index)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_druguse_2019 <- wm_q_druguse_2019 %>%\n  mutate(wt = st_weights(nb,\n                         style = \"W\"),\n         .before=1)\n```\n:::\n\n\n### 3.1.2 Moran’s I test\n\nThe code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **sfdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI_druguse_2019 <- global_moran(wm_q_druguse_2019$no_cases,\n                       wm_q_druguse_2019$nb,\n                       wm_q_druguse_2019$wt)\n\nglimpse(moranI_druguse_2019)\n```\n:::\n\n\nPerforming Global Moran’s I test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q_druguse_2019$no_cases,\n                  wm_q_druguse_2019$nb,\n                  wm_q_druguse_2019$wt)\n```\n:::\n\n\n### 3.1.3 Monte Carlo simulation\n\nNext, `global_moran_perm()` is used to perform Monte Carlo simulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q_druguse_2019$no_cases,\n                  wm_q_druguse_2019$nb,\n                  wm_q_druguse_2019$wt,\n                  nsim = 99)\n```\n:::\n\n\nThe statistical report shows that the p-value is larger than alpha value of 0.05. Hence, we have enough statistical evidence to prove that spatial distribution of drug use cases are not independent from geographical reasons.\n\nBecause the Moran's I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.\n\n## 3.2 Local Measures of Spatial Autocorrelation\n\n### 3.2.1 Local Indicators of Spatial Association (LISA)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_druguse_2019 <- wm_q_druguse_2019 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\nThe output of `local_moran()` is a sf dataframe containing the following:\n\n-   *ii*: local moran statistic\n-   *eii*: expectation of local moran statistic\n-   *var_ii*: variance of local moran statistic\n-   *z_ii*: standard deviate of local moran statistic\n-   *skewness*: the output of e1071::skewness() for the permutation samples underlying the standard deviates\n-   *kurtosis*: For `localmoran_perm`, the output of e1071::kurtosis() for the permutation samples underlying the standard deviates.\n\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the *ii* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_druguse_2019) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of number of drug cases\",\n            main.title.size = 0.8)\n```\n:::\n\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are *mean*, *median* and *pysal*. In general, classification in *mean* will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig_druguse_2019 <- lisa_druguse_2019  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_druguse_2019) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_druguse_2019) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n:::\n\n\nWe will need to derive a spatial weight matrix before we can compute local Gi\\* statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw_druguse_2019 <- wm_q_druguse_2019 %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb, \n                              geometry, \n                              scale = 1,\n                              alpha = 1),\n         .before = 1)\n```\n:::\n\n\nWe will now compute the local Gi\\* by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_druguse_2019 <- wm_idw_druguse_2019 %>% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wts, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\n```\n:::\n\n\nIn the code chunk below, tmap functions are used to plot the local Gi\\* (i.e. gi_star) at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA_druguse_2019) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n:::\n\n\n#### 3.2.1.1 P-value of HCSA\n\nIn the code chunk below, tmap functions are used to plot the p-values of local Gi\\* (i.e. p_sim) at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA_druguse_2019) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n```\n:::\n\n\n#### 3.2.1.2 Visualising local HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndruguse_map1 <- tm_shape(HCSA_druguse_2019) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\ndruguse_map2 <- tm_shape(HCSA_druguse_2019) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(druguse_map1, druguse_map2, ncol = 2)\n```\n:::\n\n\n#### 3.2.1.3 Visualising hot spot and cold spot areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig_druguse_2019 <- HCSA_druguse_2019  %>%\n  filter(p_sim < 0.05)\n\ntm_shape(HCSA_druguse_2019) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_druguse_2019) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n```\n:::\n\n\nThe figure indicates a cluster of high drug use cases around the capital Bangkok. This suggests that factors unique to Bangkok, such as socioeconomic conditions or accessibility to drug supply may contribute to higher occurrences.\n\n# 4.0 Possession Cases 2019\n\nThe same code chunks as above will now be applied to possession cases in Thailand in 2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npossession_cases_2019 <- drug_offence_list[[3]] %>%\n  filter(types_of_drug_offenses == \"possession_cases\")\n```\n:::\n\n\nAgain, we modify the neighbour sets such that there are no empty neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_poss_2019 <- possession_cases_2019 %>%\n  mutate(nb = st_contiguity(geometry))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_index <- 67 \nnearest_index <- 68\n\nwm_q_poss_2019$nb[[empty_index]] <- as.integer(nearest_index)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_poss_2019 <- wm_q_poss_2019 %>%\n  mutate(wt = st_weights(nb,\n                         style = \"W\"),\n         .before=1)\n```\n:::\n\n\n### 4.1.2 Moran’s I test\n\nThe code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **sfdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI_poss_2019 <- global_moran(wm_q_poss_2019$no_cases,\n                       wm_q_poss_2019$nb,\n                       wm_q_poss_2019$wt)\n\nglimpse(moranI_poss_2019)\n```\n:::\n\n\nPerforming Global Moran’s I test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q_poss_2019$no_cases,\n                  wm_q_poss_2019$nb,\n                  wm_q_poss_2019$wt)\n```\n:::\n\n\n### 4.1.3 Monte Carlo simulation\n\nNext, `global_moran_perm()` is used to perform Monte Carlo simulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q_poss_2019$no_cases,\n                  wm_q_poss_2019$nb,\n                  wm_q_poss_2019$wt,\n                  nsim = 99)\n```\n:::\n\n\nThe statistical report on previous tab shows that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug cases resemble random distribution (i.e. independent from spatial).\n\nBecause the Moran's I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.\n\n## 4.2 Local Measures of Spatial Autocorrelation\n\n### 4.2.1 Local Indicators of Spatial Association (LISA)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_poss_2019 <- wm_q_poss_2019 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the *ii* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_poss_2019) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of number of drug cases\",\n            main.title.size = 0.8)\n```\n:::\n\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are *mean*, *median* and *pysal*. In general, classification in *mean* will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig_poss_2019 <- lisa_poss_2019  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_poss_2019) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_poss_2019) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n:::\n\n\nWe will need to derive a spatial weight matrix before we can compute local Gi\\* statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw_poss_2019 <- wm_q_poss_2019 %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb, \n                              geometry, \n                              scale = 1,\n                              alpha = 1),\n         .before = 1)\n```\n:::\n\n\nWe will now compute the local Gi\\* by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_poss_2019 <- wm_idw_poss_2019 %>% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wts, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\n```\n:::\n\n\nIn the code chunk below, tmap functions are used to plot the local Gi\\* (i.e. gi_star) at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA_poss_2019) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n:::\n\n\n#### 4.2.1.1 P-value of HCSA\n\nIn the code chunk below, tmap functions are used to plot the p-values of local Gi\\* (i.e. p_sim) at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA_poss_2019) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n```\n:::\n\n\n#### 4.2.1.2 Visualising local HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nposs_map1 <- tm_shape(HCSA_poss_2019) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nposs_map2 <- tm_shape(HCSA_poss_2019) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(poss_map1, poss_map2, ncol = 2)\n```\n:::\n\n\n#### 4.2.1.3 Visualising hot spot and cold spot areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig_poss_2019 <- HCSA_poss_2019  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA_poss_2019) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_poss_2019) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n```\n:::\n\n\nThe map indicates clusters of high drug possession cases in the northern and southern regions of Thailand, such as Samut Prakan and Chiang Mai. Samut Prakan has several transportation hubs, including Suvarnabhumi Airport. This could facilitate the movement of drugs into and out of the province. As for Chiang Mai, it has an influx of tourists which can be a reason for higher cases of drug possession.\n\n# 5.0 Import Cases 2019\n\nThe same code chunks as above will now be applied to possession cases in Thailand in 2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_cases_2019 <- drug_offence_list[[3]] %>%\n  filter(types_of_drug_offenses == \"import_cases\")\n```\n:::\n\n\nAgain, we modify the neighbour sets such that there are no empty neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_import_2019 <- import_cases_2019 %>%\n  mutate(nb = st_contiguity(geometry))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_index <- 67 \nnearest_index <- 68\n\nwm_q_import_2019$nb[[empty_index]] <- as.integer(nearest_index)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q_import_2019 <- wm_q_import_2019 %>%\n  mutate(wt = st_weights(nb,\n                         style = \"W\"),\n         .before=1)\n```\n:::\n\n\n### 5.1.2 Moran’s I test\n\nThe code chunk below performs Moran’s I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **sfdep**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoranI_import_2019 <- global_moran(wm_q_import_2019$no_cases,\n                       wm_q_import_2019$nb,\n                       wm_q_import_2019$wt)\n\nglimpse(moranI_import_2019)\n```\n:::\n\n\nPerforming Global Moran’s I test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_test(wm_q_import_2019$no_cases,\n                  wm_q_import_2019$nb,\n                  wm_q_import_2019$wt)\n```\n:::\n\n\n### 5.1.3 Monte Carlo simulation\n\nNext, `global_moran_perm()` is used to perform Monte Carlo simulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_moran_perm(wm_q_import_2019$no_cases,\n                  wm_q_import_2019$nb,\n                  wm_q_import_2019$wt,\n                  nsim = 99)\n```\n:::\n\n\nThe statistical report on previous tab shows that the p-value is smaller than alpha value of 0.05. Hence, we have enough statistical evidence to reject the null hypothesis that the spatial distribution of drug cases resemble random distribution (i.e. independent from spatial).\n\nBecause the Moran's I statistics is greater than 0. We can infer that the spatial distribution shows sign of clustering.\n\n## 5.2 Local Measures of Spatial Autocorrelation\n\n### 5.2.1 Local Indicators of Spatial Association (LISA)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_import_2019 <- wm_q_import_2019 %>% \n  mutate(local_moran = local_moran(\n    no_cases, nb, wt, nsim = 99),\n         .before = 1) %>%\n  unnest(local_moran)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\nIn this code chunk below, tmap functions are used prepare a choropleth map by using value in the *ii* field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_import_2019) +\n  tm_fill(\"ii\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"local Moran's I of import cases\",\n            main.title.size = 0.8)\n```\n:::\n\n\nIn lisa sf data.frame, we can find three fields contain the LISA categories. They are *mean*, *median* and *pysal*. In general, classification in *mean* will be used as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlisa_sig_import_2019 <- lisa_import_2019  %>%\n  filter(p_ii < 0.05)\ntmap_mode(\"plot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(lisa_import_2019) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig_import_2019) +\n  tm_fill(\"mean\") + \n  tm_borders(alpha = 0.4)\n```\n:::\n\n\nWe will need to derive a spatial weight matrix before we can compute local Gi\\* statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw_import_2019 <- wm_q_import_2019 %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wts = st_inverse_distance(nb, \n                              geometry, \n                              scale = 1,\n                              alpha = 1),\n         .before = 1)\n```\n:::\n\n\nWe will now compute the local Gi\\* by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_import_2019 <- wm_idw_import_2019 %>% \n  mutate(local_Gi = local_gstar_perm(\n    no_cases, nb, wts, nsim = 99),\n         .before = 1) %>%\n  unnest(local_Gi)\n\nHCSA_import_2019\n```\n:::\n\n\nIn the code chunk below, tmap functions are used to plot the local Gi\\* (i.e. gi_star) at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA_import_2019) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n```\n:::\n\n\n#### 3.2.1.1 P-value of HCSA\n\nIn the code chunk below, tmap functions are used to plot the p-values of local Gi\\* (i.e. p_sim) at the province level.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(HCSA_import_2019) +\n  tm_fill(\"p_sim\") + \n  tm_borders(alpha = 0.5)\n```\n:::\n\n\n#### 3.2.1.2 Visualising local HCSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nimport_map1 <- tm_shape(HCSA_import_2019) +\n  tm_fill(\"gi_star\") + \n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n  tm_layout(main.title = \"Gi* of GDPPC\",\n            main.title.size = 0.8)\n\nimport_map2 <- tm_shape(HCSA_import_2019) +\n  tm_fill(\"p_value\",\n          breaks = c(0, 0.001, 0.01, 0.05, 1),\n              labels = c(\"0.001\", \"0.01\", \"0.05\", \"Not sig\")) + \n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"p-value of Gi*\",\n            main.title.size = 0.8)\n\ntmap_arrange(import_map1, import_map2, ncol = 2)\n```\n:::\n\n\n#### 3.2.1.3 Visualising hot spot and cold spot areas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHCSA_sig_import_2019 <- HCSA_import_2019  %>%\n  filter(p_sim < 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA_import_2019) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig_import_2019) +\n  tm_fill(\"cluster\") + \n  tm_borders(alpha = 0.4)\n```\n:::\n\n\nPhatthalung, Songkhla, and Satun are considered transportation hubs in southern Thailand. They are connected via railway lines, ferries, and airports, which may be a reason why drug imports are very high there.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}